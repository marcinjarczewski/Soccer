@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using Brilliancy.Soccer.WebApi.Translations
@model Brilliancy.Soccer.WebApi.Models.Authentication.Read.AuthenticationModel
@{
    ViewData["Title"] = WebApiTranslations.TournamentController_LostPasswordTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="section-title-wrap">
    <div class="section-title"><h3 class="section-title-h">&nbsp;</h3></div>
</div>
<div class="shadow card login-body">
    <div class="col-lg-12">
        <div>
            <div class="overlay" style="display: none;"></div>
            <div id="lost-password" style="padding-top:10px;" class="row">
                <div class="col-lg-12 row box">
                    <div class="col-md-12 col-sm-12">
                        <div data-bind="validationElement: password" class="form-group">
                            <label><span data-bind="text:$root.translations.password"></span></label>
                            <input class="form-control" data-bind="value:password">
                        </div>
                    </div>
                    <div class="col-md-12 col-sm-12">
                        <div data-bind="validationElement: repeatPassword" class="form-group">
                            <label><span data-bind="text:$root.translations.repeatPassword"></span></label>
                            <input class="form-control" data-bind="value:repeatPassword">
                        </div>
                    </div>
                </div>
                <div class="col-lg-12 row">
                    <a href="" class="btn btn-round btn-round-success" data-bind="click:$root.send">
                        <i class="fa fa-plus-circle"></i> <span data-bind="text:$root.translations.confirm"></span>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        require(['requireConfig'], function () {
            require(['/js/viewScripts/authentication/lostPassword.js', 'knockout'], function (viewModel, ko) {
                @{var json = JsonConvert.SerializeObject(
                    Model,
                    Formatting.None,
                    new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                }
                ko.applyBindings(viewModel({
                    json: @Html.Raw(json)
                }));
            });
        });
    </script>
}
