// <auto-generated />
using System;
using Brilliancy.Soccer.DbAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Brilliancy.Soccer.DbAccess.Migrations
{
    [DbContext(typeof(SoccerDbContext))]
    [Migration("20220214212727_AddPlayers")]
    partial class AddPlayers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.PlayerDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");

                    b.HasCheckConstraint("CK_AnyName", "ISNULL([NickName], '') != '' OR ISNULL([FirstName], '') != '' OR ISNULL([LastName], '') != ''");
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.RoleDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.TournamentDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefaultDayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("DefaultHour")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tournaments");

                    b.HasCheckConstraint("CK_DefaultDayOfTheWeek", "[DefaultDayOfTheWeek] >= 1 AND [DefaultDayOfTheWeek] <= 7");
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.UserDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.UserRoleDbModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TournamentDbModelUserDbModel", b =>
                {
                    b.Property<int>("AdminsId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("TournamentAdminsId")
                        .HasColumnType("int")
                        .HasColumnName("TournamentId");

                    b.HasKey("AdminsId", "TournamentAdminsId");

                    b.HasIndex("TournamentAdminsId");

                    b.ToTable("TournamentAdmins");
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.PlayerDbModel", b =>
                {
                    b.HasOne("Brilliancy.Soccer.DbModels.TournamentDbModel", "Tournament")
                        .WithMany("Players")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brilliancy.Soccer.DbModels.UserDbModel", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.TournamentDbModel", b =>
                {
                    b.HasOne("Brilliancy.Soccer.DbModels.UserDbModel", "Owner")
                        .WithMany("OwnedTournaments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.UserRoleDbModel", b =>
                {
                    b.HasOne("Brilliancy.Soccer.DbModels.RoleDbModel", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brilliancy.Soccer.DbModels.UserDbModel", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TournamentDbModelUserDbModel", b =>
                {
                    b.HasOne("Brilliancy.Soccer.DbModels.UserDbModel", null)
                        .WithMany()
                        .HasForeignKey("AdminsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brilliancy.Soccer.DbModels.TournamentDbModel", null)
                        .WithMany()
                        .HasForeignKey("TournamentAdminsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.RoleDbModel", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.TournamentDbModel", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Brilliancy.Soccer.DbModels.UserDbModel", b =>
                {
                    b.Navigation("OwnedTournaments");

                    b.Navigation("Players");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
